[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(0, 0, 0, 0);
uniform float opacity : hint_range(0,1,0.01);
uniform vec2 seed = vec2(0,0);
uniform int octaves = 4;

float rand(vec2 coord) {
	return fract(sin(dot(coord, seed) * 1000.0) * 1000.0);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord) {
	float value = 0.0;
	float scale = 0.5;
	
	for( int i = 0; i < octaves; i++) {
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * 20.0;
	
	vec2 motion = vec2( fbm(coord + vec2(TIME * -0.5, TIME * 0.5)));
	
	float final = fbm(coord + motion); 
	
	COLOR = vec4(color.x, color.y, color.z, final * opacity);
}"

[resource]
shader = SubResource( 1 )
shader_param/color = Color( 0.301961, 0.223529, 0.392157, 1 )
shader_param/opacity = 0.97
shader_param/seed = Vector2( 28.02, 33.1798 )
shader_param/octaves = 4
